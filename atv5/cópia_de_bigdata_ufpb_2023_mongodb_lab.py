# -*- coding: utf-8 -*-
"""Cópia de bigdata-ufpb-2023-mongodb-lab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D-chURAgooGdFE4l4zs-nHSvUJX8BAhU

# Install and start MongoDB Client

Execute the following cell, in order to install MongoDB Client
"""

!pip install -q pymongo

"""# Download the data

Execute the following cell to obtain the data.
"""

!wget https://gquercini.github.io/courses/plp/tutorials/mongodb-data.zip
!unzip mongodb-data.zip

"""# Initialization

Database and collection creation, data import.

* We start a new **MongoDB client** that connects to the running MongoDB server.

* We create a new **database** called *cinema*.

* We create a new **collection** called *movies*. The collection is created in the database *cinema*.

* We import some data to the collection.

**IMPORTANT.** Only when we import some data are the database and the collection actually created.
"""

from pymongo import MongoClient
import json
import os
from bson import ObjectId

# Creation of the client.
client = MongoClient("mongodb+srv://augustomiguel:efrI8RQ75yzE8zdu@cluster0.tm4np.mongodb.net/")

try:
  # # Creation of the new database cinema
  # db = client['cinema']

  # # Creation of the new collection cinema
  # movies = db['movies']


  # Open the json file containing the data
  with open('/content/mongodb-data/movies_lang.json') as f:
    movies_data = json.load(f)

  # # Import the data into the collection
  # movies.insert_many(movies_data)

  client.list_database_names()

except Exception as e:
  print(f"Ocorreu um erro: {e}")

"""We define a **utility function** `print_result` that we can use when we want to visualize the result of a query."""

def print_result(query_result):
  for res in query_result:
    print(res)

"""# Atividade

db.collection.aggregate(
    { $project : { "Tags._id" : 1 }},
    { $unwind : "$Tags" },
    { $match: {$or: [{"Tags._id":"tag1"},{"Tags._id":"tag2"}]}},
    {
        $group:
        {
            _id : { id: "$_id"},
            "count": { $sum:1 }
        }
    },
    { $sort: {"count":-1}}
).explain()

1. Inserir um Novo Filme Escreva uma consulta para inserir um novo filme na coleção `movies`.  

O documento deve conter título, ano de lançamento, elenco, gênero, classificação e sinopse.
"""

db = client['cinema']
movies = db['movies']
# Dados do novo filme
movie = {
    "title": "Inception",
    "year": 2010,
    "cast": [
        { "name": "Leonardo DiCaprio", "role": "Dom Cobb" },
        { "name": "Joseph Gordon-Levitt", "role": "Arthur" },
        { "name": "Elliot Page", "role": "Ariadne" }
    ],
    "genre": "Sci-Fi",
    "rating": "PG-13",
    "synopsis": "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O."
}

# Insere o novo filme na coleção
result = movies.insert_one(movie)

# Exibe o ID do documento inserido
print(f"Filme inserido com o ID: {result.inserted_id}")

"""2. Inserir uma Nova Avaliação  

Escreva uma consulta para inserir uma nova avaliação de um usuário na coleção `reviews`. O documento deve incluir o ID do filme, ID do usuário, comentário e nota de avaliação.
"""

from bson import ObjectId

db = client['cinema']
reviews = db['reviews']
# Dados da nova avaliação
new_review = {
    "movie_id": ObjectId("573a1390f29313caabcd42e8"),  # ID do filme
    "user_id": ObjectId("59b99db4cfa9a34dcd7885b7"),  # ID do usuário
    "comment": "Um dos melhores filmes que já assisti!",
    "rating": 5
}

# Insere a nova avaliação na coleção
result = reviews.insert_one(new_review)

# Exibe o ID do documento inserido
print(f"Avaliação inserida com o ID: {result.inserted_id}")

"""3. Inserir um Novo Usuário
Escreva uma consulta para inserir um novo usuário na coleção `users`, contendo nome, email e lista
de filmes favoritos.
"""

db = client['cinema']
users = db['users']

# Dados do novo usuário
new_user = {
    "name": "Augusto Miguel",
    "email": "augustomiguel@example.com",
    "favorite_movies": [
        ObjectId("67c9da80bbde04fd1193f44c"),  # ID do filme 1
        ObjectId("573a1390f29313caabcd42e8")   # ID do filme 2
    ]
}

# Insere o novo usuário na coleção

result = users.insert_one(new_user)

# Exibe o ID do documento inserido
print(f"Usuário inserido com o ID: {result.inserted_id}")

# Consulta o usuário pelo ID
user_id = ObjectId("67c9dd7cbbde04fd1193f459")
user = users.find_one({ "_id": user_id })

# Exibe o usuário encontrado
print(user)

"""Leitura de Dados (Read)
4. Buscar um Filme Específico
Escreva uma consulta para buscar os detalhes de um filme específico pelo título
"""

# Busca o filme pelo título
movie_title = "Inception"
movie = movies.find_one({ "title": movie_title })

# Exibe o filme encontrado
print(movie)

"""5. Listar Filmes de um Diretor Específico
Escreva uma consulta para listar todos os filmes de um determinado diretor.
"""

# Busca os filmes de um diretor específico
director_first_name = "Alfred"
director_last_name = "Hitchcock"
movies_by_director = movies.find({
    "director.first_name": director_first_name,
    "director.last_name": director_last_name
})

# Exibe os filmes encontrados
for movie in movies_by_director:
    print(movie)

"""6. Listar Todas as Avaliações de um Filme
Escreva uma consulta para listar todas as avaliações de um filme específico, usando a relação entre
as coleções `movies` e `reviews`.

"""

# Busca o ID do filme pelo título
movie_title = "Inception"
movie = movies.find_one({ "title": movie_title }, { "_id": 1 })

if movie:
    movie_id = movie["_id"]
    print(f"ID do filme '{movie_title}': {movie_id}")

    # Busca as avaliações do filme
    movie_reviews = reviews.find({ "movie_id": movie_id })

    # Exibe as avaliações encontradas
    for review in movie_reviews:
        print(review)
else:
    print(f"Filme '{movie_title}' não encontrado.")

"""7. Listar Todos os Filmes Favoritos de um Usuário
Escreva uma consulta para listar todos os filmes favoritos de um usuário específico, cruzando dados
das coleções `users` e `movies`.

"""

# Passo 1: Obter os IDs dos filmes favoritos do usuário
user_id = ObjectId("67c9dd7cbbde04fd1193f459")
user = users.find_one({ "_id": user_id }, { "favorite_movies": 1 })

if user and "favorite_movies" in user:
    favorite_movie_ids = user["favorite_movies"]

    # Passo 2: Buscar os detalhes dos filmes favoritos
    favorite_movies = movies.find({ "_id": { "$in": favorite_movie_ids } })

    # Exibe os filmes favoritos
    for movie in favorite_movies:
        print(movie)
else:
    print("Usuário não encontrado ou sem filmes favoritos.")

"""Atualização de Dados (Update)
8. Atualizar a Classificação de um Filme
Escreva uma consulta para atualizar a classificação de um filme específico.
"""

# Atualiza a classificação do filme
movie_title = "Inception"
new_rating = "PG-13"

result = movies.update_one(
    { "title": movie_title },  # Filtro para encontrar o filme
    { "$set": { "rating": new_rating } }  # Atualização do campo "rating"
)

# Verifica se a atualização foi bem-sucedida
if result.matched_count > 0:
    print(f"Classificação do filme '{movie_title}' atualizada para '{new_rating}'.")
else:
    print(f"Filme '{movie_title}' não encontrado.")

"""9. Adicionar um Novo Ator ao Elenco
Escreva uma consulta para adicionar um ator a um filme específico.
"""

# Adicionar um novo ator ao elenco de um filme específico
movie_title = "Inception"
new_actor = { "name": "Tom Hardy", "role": "Eames" }

result = movies.update_one(
    { "title": movie_title },
    { "$push": { "cast": new_actor } }
)

# Verifica se a atualização foi bem-sucedida
if result.modified_count > 0:
    print(f"Ator '{new_actor['name']}' adicionado ao elenco do filme '{movie_title}'.")
else:
    print(f"Filme '{movie_title}' não encontrado ou ator já existente no elenco.")

"""10. Atualizar a Nota de uma Avaliação
Escreva uma consulta para modificar a nota de uma avaliação já existente na coleção `reviews`
"""

# Atualiza a nota de uma avaliação existente
review_id = ObjectId("67c9dc39bbde04fd1193f44d")  # Substitua pelo ID da avaliação para atualiza-la
new_rating = 4

result = reviews.update_one(
    { "_id": review_id },
    { "$set": { "rating": new_rating } }
)

# Verifica se a atualização foi bem-sucedida
if result.modified_count > 0:
    print(f"Nota da avaliação com ID '{review_id}' atualizada para '{new_rating}'.")
else:
    print(f"Avaliação com ID '{review_id}' não encontrada ou a nota já é '{new_rating}'.")

"""11. Adicionar um Filme à Lista de Favoritos de um Usuário
Escreva uma consulta para adicionar um novo filme à lista de favoritos de um usuário na coleção
`users`.

"""

# Adicionar um filme à lista de favoritos de um usuário
user_id = ObjectId("67c9dd7cbbde04fd1193f459")  # ID do usuário
movie_id_to_add = ObjectId("573a1390f29313caabcd41e8")  # ID do filme a ser adicionado

result = users.update_one(
    { "_id": user_id },
    { "$addToSet": { "favorite_movies": movie_id_to_add } }
)

# Verifica se a atualização foi bem-sucedida
if result.modified_count > 0:
    print(f"Filme com ID '{movie_id_to_add}' adicionado aos favoritos do usuário com ID '{user_id}'.")
else:
    print(f"Usuário com ID '{user_id}' não encontrado ou filme já está na lista de favoritos.")

"""Exclusão de Dados (Delete)
12. Excluir um Filme
Escreva uma consulta para excluir um filme específico pelo título
"""

# Excluir um filme específico pelo título
movie_title_to_delete = "Inception"

result = movies.delete_one({"title": movie_title_to_delete})

if result.deleted_count > 0:
    print(f"Filme '{movie_title_to_delete}' excluído com sucesso.")
else:
    print(f"Filme '{movie_title_to_delete}' não encontrado.")

"""13. Excluir Todas as Avaliações de um Filme
Escreva uma consulta para excluir todas as avaliações de um filme específico na coleção `reviews`
"""

# Excluir todas as avaliações de um filme específico
movie_id_to_delete_reviews = ObjectId("573a1390f29313caabcd42e8")  # Substitua pelo ID do filme

result = reviews.delete_many({"movie_id": movie_id_to_delete_reviews})

if result.deleted_count > 0:
    print(f"Todas as avaliações do filme com ID '{movie_id_to_delete_reviews}' foram excluídas com sucesso. Total de avaliações excluídas: {result.deleted_count}")
else:
    print(f"Nenhuma avaliação encontrada para o filme com ID '{movie_id_to_delete_reviews}' ou ocorreu um erro.")

"""14. Excluir Todos os Filmes com Avaliação Inferior a 5.0
Escreva uma consulta para excluir todos os filmes com avaliação abaixo de um determinado valor.
"""

# Excluir todos os filmes com avaliação inferior a 5.0
min_rating = 5.0

result = movies.delete_many({"rating": {"$lt": min_rating}})

if result.deleted_count > 0:
    print(f"Foram excluídos {result.deleted_count} filmes com avaliação inferior a {min_rating}.")
else:
    print(f"Nenhum filme com avaliação inferior a {min_rating} foi encontrado.")
    # Exclui todos os filmes com avaliação inferior a 5.0

# Exibe o número de filmes excluídos
print(f"{result.deleted_count} filmes foram excluídos.")

"""15. Excluir um Usuário e Suas Avaliações
Escreva uma consulta para remover um usuário da coleção `users` e deletar todas as avaliações
associadas a ele na coleção `reviews`.

"""

# ID do usuário
user_id = ObjectId("59b99db6cfa9a34dcd7885bc")

# Passo 1: Excluir o usuário
user_result = users.delete_one({ "_id": user_id })

# Passo 2: Excluir as avaliações do usuário
reviews_result = reviews.delete_many({ "user_id": user_id })

# Exibe os resultados
print(f"Usuário excluído: {user_result.deleted_count}")
print(f"Avaliações excluídas: {reviews_result.deleted_count}")

"""Uso Combinado de Operadores de Busca e Comparação
16. Buscar Filmes com Avaliação Acima de um Valor
Escreva uma consulta para encontrar todos os filmes com avaliação superior a 8.0
"""

# Busca os filmes com avaliação superior a 8.0
high_rated_movies = movies.find({ "rating": { "$gt": 8.0 } })

# Exibe os filmes encontrados
if movie:
  for movie in high_rated_movies:
    print(movie)
else:
  print("Nenhum filme encontrado com avaliação superior a 8.0.")

"""17. Buscar Filmes em um Intervalo de Anos
Escreva uma consulta para encontrar filmes lançados entre dois anos específicos
"""

# Busca filmes lançados entre dois anos específicos
start_year = 2000
end_year = 2010

movies_in_range = movies.find({
    "year": { "$gte": start_year, "$lte": end_year }
})

# Exibe os filmes encontrados
for movie in movies_in_range:
  print(movie)

"""18. Buscar Filmes com Mais de X Avaliações e Nota Acima de um Valor
Escreva uma consulta para encontrar filmes com um número mínimo de avaliações e nota superior a
um determinado valor.


"""

pipeline = [
    {
        "$match": {
            "reviews": { "$exists": True, "$type": "array" }  # Filtra documentos onde "reviews" é um array
        }
    },
    {
        "$project": {
            "title": 1,
            "average_rating": { "$avg": "$reviews.rating" },  # Calcula a média das avaliações
            "num_reviews": { "$size": "$reviews" }  # Conta o número de avaliações
        }
    },
    {
        "$match": {
            "num_reviews": { "$gte": 10 },  # Número mínimo de avaliações
            "average_rating": { "$gt": 8.0 }  # Nota média superior a 8.0
        }
    }
]

# Executa a agregação
result = movies.aggregate(pipeline)

# Exibe os filmes encontrados
for movie in result:
    print(movie)

"""19. Buscar Usuários que Favoritaram um Determinado Filme
Escreva uma consulta para encontrar todos os usuários que adicionaram um determinado filme à
sua lista de favoritos.

"""

# ID do filme
movie_id = ObjectId("64f8e8b7e4b0d1a2b3c4d5e6")

try:
    # Busca os usuários que favoritaram o filme
    usersFavorited = users.find({ "favorite_movies": { "$in": [movie_id] } })

    # Exibe os usuários encontrados
    for user in usersFavorited:
        print(user)
except Exception as e:
    print(f"Ocorreu um erro: {e}")

"""Uso do Framework de Agregação
20. Contar o Número Total de Filmes por Gênero
Utilize o framework de agregação para contar quantos filmes existem por gênero na coleção
`movies
"""

pipeline = [
    {"$group": {"_id": "$genre", "count": {"$sum": 1}}},
    {"$sort": {"count": -1}}
]

result = movies.aggregate(pipeline)

for total in result:
  print(total)

"""21. Calcular a Média de Avaliação por Ano
Utilize o framework de agregação para calcular a média de avaliações dos filmes agrupados por ano
de lançamento.

"""

pipeline = [
    {
        "$group": {
            "_id": "$year",  # Agrupa os filmes por ano de lançamento
            "media_avaliacao": { "$avg": "$rating" }  # Calcula a média das avaliações
        }
    },
    {
        "$sort": { "_id": 1 }  # Ordena os resultados por ano (crescente)
    }
]

# Executa a agregação
result = movies.aggregate(pipeline)

# Exibe os resultados
for year in result:
    # Verifica se media_avaliacao é numérica antes de formatar
    if isinstance(year['media_avaliacao'], (int, float)):
        print(f"Ano: {year['_id']}, Média de Avaliação: {year['media_avaliacao']:.2f}")
    else:
        print(f"Ano: {year['_id']}, Média de Avaliação: N/A")

"""22. Encontrar o Filme com a Maior Nota de Avaliação
Utilize o framework de agregação para encontrar o filme com a maior nota de avaliação.

"""

# prompt: Encontrar o Filme com a Maior Nota de Avaliação Utilize o framework de agregação para encontrar o filme com a maior nota de avaliação.

pipeline = [
    {"$sort": {"rating": -1}},
    {"$limit": 1}
]

result = movies.aggregate(pipeline)

for movie in result:
  print(movie)

"""23. Listar os 5 Filmes Mais Bem Avaliados de um Determinado Gênero
Utilize o framework de agregação para listar os cinco filmes com maior avaliação dentro de um
gênero específico
"""

genero = "Sci-Fi"
pipeline = [
    {
        "$match": { "genre": genero }  # Filtra os filmes do gênero "Sci-Fi"
    },
    {
        "$sort": { "rating": -1 }  # Ordena os filmes por avaliação (decrescente)
    },
    {
        "$limit": 5  # Limita o resultado aos 5 filmes mais bem avaliados
    },
    {
        "$project": { "title": 1, "rating": 1, "_id": 0 }  # Seleciona apenas os campos "title" e "rating"
    }
]

# Executa a agregação
result = movies.aggregate(pipeline)

# Exibe os resultados
for movie in result:
    print(f"Título: {movie['title']}, Avaliação: {movie['rating']}")

"""24. Contar o Número de Avaliações Feitas por Cada Usuário
Escreva uma consulta que utiliza o framework de agregação para contar quantas avaliações cada
usuário fez na coleção `reviews`.

"""

pipeline = [
    {
        "$group": {
            "_id": "$user_id",  # Agrupa as avaliações por ID do usuário
            "total_avaliacoes": { "$sum": 1 }  # Conta o número de avaliações em cada grupo
        }
    },
    {
        "$sort": { "total_avaliacoes": -1 }  # Ordena os resultados pelo número de avaliações (decrescente)
    }
]

# Executa a agregação
result = reviews.aggregate(pipeline)

# Exibe os resultados
for user in result:
    print(f"ID do Usuário: {user['_id']}, Total de Avaliações: {user['total_avaliacoes']}")

"""25. Listar os Usuários com Mais de 10 Avaliações e Média Acima de 7.5
Escreva uma consulta que combina operadores e agregação para encontrar usuários ativos que
fizeram mais de 10 avaliações e cuja média de notas seja superior a 7.5.
"""

pipeline = [
    {
        "$group": {
            "_id": "$user_id",  # Agrupa as avaliações por ID do usuário
            "total_avaliacoes": { "$sum": 1 },  # Conta o número de avaliações
            "media_notas": { "$avg": "$rating" }  # Calcula a média das notas
        }
    },
    {
        "$match": {
            "total_avaliacoes": { "$gt": 10 },  # Filtra usuários com mais de 10 avaliações
            "media_notas": { "$gt": 7.5 }  # Filtra usuários com média de notas superior a 7.5
        }
    },
    {
        "$sort": { "total_avaliacoes": -1 }  # Ordena os resultados pelo número de avaliações (decrescente)
    }
]

# Executa a agregação
result = reviews.aggregate(pipeline)

# Exibe os resultados
for user in result:
    print(f"ID do Usuário: {user['_id']}, Total de Avaliações: {user['total_avaliacoes']}, Média de Notas: {user['media_notas']:.2f}")

"""# Find one document

In order to get only one document from the database we can use the function ``find_one()``. In the database ``cinema``, each **document** describes a **movie**; each movie is characterized by several **attributes** or **fields**.
"""

query_result = movies.find_one()
print_result(query_result)

"""# The function ``find``

The function ``find`` is used to get documents from the database.

If we don't pass ``find`` any arguments, it returns all the documents from the database.
"""

query_result = movies.find_one()
query_result

"""## Projection

Each movie being characterized by several attributes, sometimes we need to **select** only some of them. The function ``find`` takes in two arguments:

* The first argument specifies a boolean condition that the documents must satisfy to get returned by the query.

* The second argument specifies the list of attributes that we need to select in the result of the query.

The following cell gets all the documents from the database (the first argument is empty) and visualizes only the title.
"""

query_result = movies.find({},)
print_result(query_result)

"""In the previous example, the output also contains the field ``_id`` that is value that uniquely identifies a document. If we don't want ``_id`` to be displayed in the output, we need to say it explicitly, as follows:

"""

query_result = movies.find({}, {"title":1, "_id": 0})
print_result(query_result)

"""## Filtering

The first argument that we pass ``find`` is a **boolean predicate** used to filter the documents that we intend to get from the database.
It is equivalent to the clause ``WHERE`` in SQL.

### Equality conditions

We use expressions of the form ``<field>:<value>``
"""

query_result = movies.find({"genre": "drama"}, {"title": 1, "genre": 1, "_id": 0})
print_result(query_result)

"""### Conditions with query operators

Conditions can be specified with **query operators** with the following syntax: ``{<field>: {<operator>: <value>}}``
"""

query_result = movies.find({"genre": {"$in": ["drama", "crime"]}}, {"title": 1, "genre": 1, "_id": 0})
print_result(query_result)

"""For a list of **query operators**, [read the documentation](https://docs.mongodb.com/manual/reference/operator/query/#std-label-query-selectors).

### Specify AND conditions

We can specify **more than one condition** in the predicate.
"""

query_result = movies.find({"genre": "drama", "year": 2015}, {"title": 1, "genre": 1, "year": 1, "_id": 0})
print_result(query_result)

"""In order to specify AND conditions on multiple values on the same field, we can write as follows:"""

query_result = movies.find({"year": {"$gte": 2010, "$lte": 2015}}, {"title": 1, "genre": 1, "year": 1, "_id": 0})
print_result(query_result)

"""### Specify OR conditions

If we want to specify OR conditions on **different fields**, we can use the operator ``$or``.
"""

query_result = movies.find({"$or": [{"genre": "crime"}, {"year": 2015}]}, {"title": 1, "genre": 1, "year": 1, "_id": 0})
print_result(query_result)

"""If we want to specify OR conditions on the **values of one field**, we use the operator ``$in``."""

query_result = movies.find({"genre": {"$in": ["drama", "crime"]}}, {"title": 1, "genre": 1, "_id": 0})
print_result(query_result)

"""### Match embedded documents

The value of a field of a document can be a document itself (embedded document). For instance, the value of the key ``director`` in a movie document is a document that contains the information about the director of the movie.

For instance, we might want to find all movies, where the value of the key ``director`` is
``{'_id': 'artist:20', 'last_name': 'Eastwood', 'first_name': 'Clint', 'birth_date': '1930'}``.

**IMPORTANT.** Only the documents that have an **exact match** with the given embedded document will be returned. Two documents $D_1$ and $D_2$ have an exact match if:

* They have the **same keys**.
* The corresponding keys have the **same values**.
* The keys in **both documents** are in the **same order**.
"""

query_result = movies.find({"director": {'_id': 'artist:20', 'last_name': 'Eastwood', 'first_name': 'Clint', 'birth_date': '1930'} },
                           {"title": 1, "director": 1, "_id": 0})
print_result(query_result)

"""We can specify a condition on **individual fields** in an embedded document by using the **dot notation**."""

query_result = movies.find({"actors.": '1930'}, {"title": 1, "director": 1, "_id": 0})
print_result(query_result)

"""### Querying an array

The value of some fields (e.g., ``languages``) might be an **array**.

**Question 01.** What does the following cell? Is it able to get movies where the languages are listed in the following order: ``["en", "fr"]``?
"""

query_result = movies.find({"languages": ["en", "fr"]}, {"languages":1} )
print_result(query_result)

"""In order to get all documents where the array field contains **at least one element** with the specified value, we use the following query.

**Question 02.** Which movies does the following query return?
"""

query_result = movies.find({"languages": "fr"}, {"languages":1} )
print_result(query_result)

"""**Question 03.** Write a query to get all movies that are **not** dubbed in French. You can have a look at the [query operators](https://docs.mongodb.com/manual/reference/operator/query/) to identify the one that you need here."""

query_result = movies.find({"languages": {"$ne":"fr"}}, {"languages":1} )
print_result(query_result)



"""If we need to query for an **array element that matches multiple criteria**, we can use the operator ``$elemMatch``.

**Question 04.** What does the following code?
"""

query_result = movies.find({"languages": {"$elemMatch": {"$gt": "el", "$lt": "it"}}}, {"title": 1, "languages": 1, "_id": 0}).sort("title", -1)
print_result(query_result)

"""**Question 05.** What does the following code?"""

query_result = movies.find({"languages": {"$size" : 0}}, {"title": 1, "languages": 1, "_id": 0})
print_result(query_result)

"""The operator ``elemMatch`` is useful when we want to retrieve all movies for which at least one language meets the defined criteria.
Suppose that we want to find all movies that are dubbed in both French **and** English (and, possibly, other languages). In this case, we use the operator ``$all``.
"""

query_result = movies.find({"languages": {"$all": ["en", "fr"]}}, {"title": 1, "languages": 1, "_id": 0})
print_result(query_result)

"""**Question 06.** Write a query to get all movies that are dubbed in French **and** English and no other language."""

query_result = movies.find({"languages": {"$size":2, "$all": ["fr", "en"]}}, {"title": 1, "languages": 1, "_id": 1})
print_result(query_result)

"""Another possible solution is the following:"""

query_result = movies.find({"languages": {"$in": [ ["en", "fr"],["fr", "en"]]}}, {"title": 1, "languages": 1, "_id": 0})
print_result(query_result)

"""### Querying an array of embedded documents

The value of the field ``actors`` is an array, where each element is a document. We can use what we learned above on querying embedded (or nested) documents and arrays to query this field

**Question 07.** Write a query to get all the movies where at least one actor was born in 1949.
"""

query_result = movies.find({"actors.birth_date":"1949"}, {"title": 1, "languages": 1, "_id": 0, "actors":1})
print_result(query_result)

"""The previous solution is good if we need to match arrays with a single condition.
In order to specify a multiple query conditions, we can use the operator ``elemMatch`` as in the case of arrays.

**Question 08.** Write a query to get all the movies that have at least one actor with first name "Robert" and birth date "1931"
"""

query_result = movies.find( {"actors": {"$elemMatch": {"first_name": "Robert", "birth_date": "1931"}}}, {"title": 1, "languages": 1, "_id": 0, "actors":1})
print_result(query_result)

query_result = movies.find({"actors.first_name": "Robert", "actors.birth_date": "1931"}, {"title": 1, "languages": 1, "_id": 0, "actors":1})
print_result(query_result)

"""# Aggregation framework

This **aggregation framework** is another way to express queries in MongoDB, way more powerful than the function ``find`` that can be used for simple queries.

A query is expressed as a **pipeline** of operations. The first operation in the pipeline is called on all the documents in the collection; the documents output by the first operation are taken in by the second operator in the pipeline as so on.
Each operator in the pipeline is referred to as a **stage**.

## The operator ``$match``

The operator ``$match`` is used to filter the input documents based on a boolean condition. It is equivalent to WHERE in a SQL query. Usually, ``$match$`` is used as the **first stage**: we should, in fact, reduce the number of the documents on which the subsequent stages in the pipeline will work.

The following query selects all the movies produced in 2015.
"""

result = movies.aggregate([{"$match": {"year": 2015}}])
print_result(result)

"""## The operator ``$project``

The operator ``$project`` is used to:

* select the fields that appear in the result of the query (lime SELECT in SQL);
* adding new fields to the documents in the result of the query.
* resetting the values of existing fields.

It is therefore way more powerful than the projection of the function ``find()``.

In the following code, we use the operator ``$project`` to select some fields to appear in the result of the query.

**Question 09.** What is the input to the operator ``$project``?
"""

result = movies.aggregate([{"$match": {"year": 2015}},
                           {"$project": {"title":1, "year":1, "_id":0}}])
print_result(result)

"""In the following, we use ``$project`` to create a **new field** named ``nb_actors`` whose value is the number of actors in the movie.

The operator ``$size`` returns the number of elements of an array.
The aggregation framework operators are detailed [in the documentation](https://docs.mongodb.com/manual/reference/operator/aggregation/).

**Question 10.** What is the input of the operator ``$project``?
"""

result = movies.aggregate([{"$project": {"title":1,"_id":0}}])
print_result(result)

"""**Question 11.** Does the creation of the new field ``nb_actors`` modify the documents stored in the database?"""

result = movies.aggregate([{"$project": {"title":1,"num_actors": {"$size": "$actors"},"_id":0}}])
print_result(result)

"""## The operator ``$unwind``

The operator ``$unwind`` is used to explode an array from the input documents to output a document for each element.

Let's look at the result of a query where we look at the actors of the movie titled Skyfall. The movie has 3 actors.
"""

result = movies.aggregate([{"$match": {"title": "Skyfall"}},
                           {"$project": {"title":1, "actors":1}}])
print_result(result)

"""Now, let's look at the result of the same query, where the array is deconstructed with the operator ``$unwind``.

**Question 12.** What is the difference?
"""

result = movies.aggregate([{"$match": {"title": "Skyfall"}},
                           {"$project": {"title":1, "actors":1}},
                           {"$unwind": "$actors"}])
print_result(result)

"""Consider what happens when a movie does not have any actors. This means that the corresponding document doesn't have a field ``actors``, or the field is an empty array. After applying ``$unwind``, no document is returned."""

result = movies.aggregate([{"$match": {"title": "Sacrifice"}},
                           {"$project": {"title": 1, "actors": 1}},
                           {"$unwind": "$actors"}])
print_result(result)

"""In order to output a document even if the movie has no actors, we must specify ``$aggregate`` with arguments, as follows:"""

result = movies.aggregate([{"$match": {"title": "Sacrifice"}},
                           {"$project": {"title": 1, "actors": 1}},
                           {"$unwind":
                                {
                                    "path": "$actors",
                                    "preserveNullAndEmptyArrays": True
                                }
                           }
                          ])
print_result(result)

"""## The operator ``$group``

The operator ``$group`` is used to group documents based on (a) specific field(s) and apply an aggregating function on it (such as, ``$sum``, ``$max`` and ``$min``).

The following query counts the number of movies in the collection.
"""

result = movies.aggregate([{"$group": {"_id": "null", "count": {"$sum": 1}}}])
print_result(result)

"""The following query returns all the distinct genres of the movies in the collection."""

result = movies.aggregate([{"$group": {"_id": "$genre"}}])
print_result(result)

"""The following query returns the number of movies for each genre."""

result = movies.aggregate([{"$group": {"_id": "$genre", "qtdy": {"$sum": 1}}}])
print_result(result)

"""We can also group on multiple fields. Te next query counts the number of movies by genre and year."""

result = movies.aggregate([{"$group": {"_id": {"genre": "$genre", "year": "$year"}, "count": {"$sum": 1}}}])
print_result(result)

"""## The operator ``$sort``

The operator ``$sort`` is used to sort the documents based on some criteria.

**Question 13.** What does the following code?
"""

result = movies.aggregate([ {"$project": {"title": 1, "nb_actors": {"$size": "$actors"}, "_id": 0}},
                           {"$sort": {"rsnb_acto": -1}}
                           ])
print_result(result)

"""**Question 14.** What would the query be if we wanted to sort by incresing order?"""

result = movies.aggregate([ {"$project": {"title": 1, "nb_actors": {"$size": "$actors"}, "_id": 0}},
                           {"$sort": {"nb_actors": 1}}
                           ])
print_result(result)